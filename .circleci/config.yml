--- 
commands: 
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string" 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: "string"    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            SUCCESS=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET \
                https://api.memstash.io/values/migrations-<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm i
              npm run migration:revert
            fi
jobs: 
  build-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              pwd
              cd ~/project/backend
              pwd
              ls
              npm install
              npm run build
          name: "Back-end build"
      - 
        save_cache: 
          key: backend-build
          paths: 
            - backend/node_modules
  build-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - frontend-build
      - 
        run: 
          command: |
              pwd
              cd ~/project/frontend
              pwd
              ls
              npm install
              #npm init --yes
              npm run build
              # exit 1
          name: "Build front-end"
      - 
        save_cache: 
          key: frontend-build
          paths: 
            - frontend/node_modules
  cleanup: 
    docker: 
      - 
        image: amazon/aws-cli
    steps: 
      - checkout
      - 
        run: 
          command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
          name: "Get old stack workflow id"
      - 
        run: 
          command: |
              # Get old workflow id
              export OLD_WORKFLOW_ID=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" --request GET \
                https://api.memstash.io/values/workflow_id)
              # Get stack list
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              
              echo Old Workflow Id:${OLD_WORKFLOW_ID}
              echo "New id:${CIRCLE_WORKFLOW_ID:0:7}"
              echo ${STACKS}
              
              # if [[ ! "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
              # then
              echo "Deleting stacks with Old Worflow ID: ${OLD_WORKFLOW_ID}"
              aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
              aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name frontend-${OLD_WORKFLOW_ID}
              # fi
          name: "Remove old stacks and files"
      - 
        revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update: 
    docker: 
      - 
        image: amazon/aws-cli
    steps: 
      - checkout
      - 
        run: 
          command: "# your code here\n"
          name: "Install dependencies"
      - 
        run: 
          command: |
              export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request PUT --data "${OLD_WORKFLOW_ID}" \
                https://api.memstash.io/values/workflow_id
              
              echo Old Workflow Id: ${OLD_WORKFLOW_ID}
              echo Actual Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}
              echo Stacks available: ${STACKS}
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name production-distro \
                --region us-west-2\
                --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
          name: "Update cloudfront distribution"
      - 
        revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        add_ssh_keys: 
          fingerprints: 
            - "e5:fd:9e:a1:0e:d4:dc:e7:37:c4:2b:fe:24:cd:b3:e5"
      - 
        attach_workspace: 
          at: ~/project
      - 
        command: "apk add --update ansible\n"
        name: "Install ansible."
        run: ~
      - 
        run: 
          command: |
              apk add --update tar gzip ansible nodejs npm curl
              pip install awscli
          name: "Install dependencies"
      - 
        run: 
          command: "cat backend/.env\n"
          name: "Check there is .env file at workspace."
      - 
        run: 
          command: |
              cd .circleci/ansible
              echo "Inventory content"
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
          name: "Configure server"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        add_ssh_keys: 
          fingerprints: 
            - "e5:fd:9e:a1:0e:d4:dc:e7:37:c4:2b:fe:24:cd:b3:e5"
      - 
        attach_workspace: 
          at: ~/project
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              apk add --update tar gzip ansible nodejs npm curl openssh-client
              pip install awscli
          name: "Install dependencies"
      - 
        run: 
          command: |
              pwd            
              tar -C backend -czvf backend_artifact.tar.gz .
              cd .circleci/ansible
              ansible-playbook -i inventory.txt deploy-backend.yml
          name: "Deploy backend"
          no_output_timeout: 30m
      - 
        revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        run: 
          command: |
              apk add --update tar gzip ansible nodejs npm curl
              pip install awscli
          name: "Install dependencies"
      - 
        run: 
          command: |
              BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:4})
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
          name: "Get backend url"
      - 
        run: 
          command: |
              # echo "${API_URL}"
              cd frontend
              
              npm audit fix
              
              BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                  --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
              
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL=${API_URL}"
              
              echo API_URL=$API_URL > .env
              echo ENVIRONMENT=development >> .env
              # echo NODE_ENV=production >> .env
              cat ".env"
              npm run build
              cd dist
              aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
          name: "Deploy frontend objects"
      - 
        revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-infrastructure: 
    docker: 
      - 
        image: amazon/aws-cli
    steps: 
      - checkout
      - 
        run: 
          command: "yum -y install tar gzip\n"
          name: "Ensure back-end infrastructure exists"
      - 
        run: 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-west-2 \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
                #exit 0
      - 
        run: 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}\
                --region us-west-2 \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
                #exit 0
          name: "Ensure front-end infrastructure exist"
      - 
        run: 
          command: |
              aws ec2 describe-instances \
              \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request PUT \
                --data `aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text` \
                https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7}
                echo URL: https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7}
                echo Token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734
          name: "Add back-end ip to ansible inventory"
      - 
        run: 
          command: |
              echo ENVIRONMENT=development > backend/.env
              echo TYPEORM_CONNECTION=postgres >> backend/.env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
              echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo NODE_ENV=development >> "backend/.env"
          name: "Add .env vars to backend distro"
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        persist_to_workspace: 
          paths: 
            - .circleci/ansible/inventory.txt
            - backend/
          root: ~/project
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  run-migrations: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        attach_workspace: 
          at: ~/project
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              pwd
              ls
              #cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
              cd backend
              cat .env
              npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
              cat migrations-${CIRCLE_WORKFLOW_ID}.txt
          name: "Run migrations"
          no_output_timeout: 7m
      - 
        run: 
          command: "cd backend\n\
              if grep -q \"success\" migrations-${CIRCLE_WORKFLOW_ID}.txt\n\
              then\n\
              \x20 curl -H \"Content-Type: text/plain\" -H \"token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734\" \\\n\
              \x20 --request PUT \\\n\
              \x20 --data '1' \\\n\
              \x20 https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}\n\
              else\n\
              \x20 curl -H \"Content-Type: text/plain\" -H \"token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734\" \\\n\
              \x20 --request PUT \\\n\
              \x20 --data '0' \\\n\
              \x20 https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}\n\
              fi\n\
              echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}  \n"
          name: "Send migration results to memstash"
  scan-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - scan-backend
      - 
        run: 
          command: |
              pwd
              cd ~/project/backend
              pwd
              ls
              npm install
              npm audit --audit-level=critical
              npm audit fix --audit-level=critical --force
          name: "scan-backend scan"
      - 
        save_cache: 
          key: test-backend
          paths: 
            - backend/node_modules
  scan-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - scan-frontend
      - 
        run: 
          command: |
              pwd
              cd ~/project/frontend
              pwd
              ls
              npm install
              npm audit --audit-level=critical
              npm audit fix --audit-level=critical --force
          name: "scan-frontend scan"
      - 
        save_cache: 
          key: test-frontend
          paths: 
            - frontend/node_modules
  smoke-test: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        run: 
          command: |
              apk add --no-cache \
                curl \
                python3 \
                py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install \
                awscli \
                && rm -rf /var/cache/apk/*
          name: "Install dependencies"
      - 
        run: 
          command: "#\n"
          name: "Get backend url"
      - 
        run: 
          command: |
              BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
              export API_URL="http://${BACKEND_IP}:3030/api/status"
              echo "${API_URL}"
              curl ${API_URL}
          name: "Backend smoke test."
      - 
        run: 
          command: |
              if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
          name: "Frontend smoke test."
      - 
        revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - 
        destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  test-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - test-backend
      - 
        run: 
          command: |
              pwd
              cd ~/project/backend
              pwd
              ls
              #npm install    // uncomment this sara
              #npm run test   // uncomment this sara
          name: "test-backend test"
      - 
        save_cache: 
          key: test-backend
          paths: 
            - backend/node_modules
  test-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
version: 2.1
workflows: 
  prod-deployment: 
    jobs: 
      - build-frontend
      - build-backend
      - 
        test-frontend: 
          requires: 
            - build-frontend
      - 
        test-backend: 
          requires: 
            - build-backend
      - 
        scan-backend: 
          requires: 
            - build-backend
      - 
        scan-frontend: 
          requires: 
            - build-frontend
      - 
        deploy-infrastructure: 
          filters: 
            branches: 
              only: 
                - main
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - 
        configure-infrastructure: 
          requires: 
            - deploy-infrastructure
      - 
        run-migrations: 
          requires: 
            - configure-infrastructure
      - 
        deploy-frontend: 
          requires: 
            - run-migrations
      - 
        deploy-backend: 
          requires: 
            - run-migrations
      - 
        smoke-test: 
          requires: 
            - deploy-backend
            - deploy-frontend
      - 
        cloudfront-update: 
          requires: 
            - smoke-test
      - 
        cleanup: 
          requires: 
            - cloudfront-update
